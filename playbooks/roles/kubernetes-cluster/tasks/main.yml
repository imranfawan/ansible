---
- name: copy cmdline
  copy:
    src: cmdline.txt
    dest: /boot

- name: Reboot host and wait for it to restart
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami

#### INSTALL KUBERNETES DEPENDENCIES ############
- name: disable swap
  shell: swapoff -a

- name: uninstall swap
  shell: dphys-swapfile uninstall

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: install Docker
  apt:
    name: docker.io
    state: present
    update_cache: true

- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present

- name: add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: add Kubernetes' APT repository
  apt_repository:
   repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
   state: present
   filename: 'kubernetes'

- name: install kubelet
  apt:
    name: kubelet
    state: present
    update_cache: true

- name: install kubeadm
  apt:
    name: kubeadm
    state: present

- name: install kubectl
  apt:
    name: kubectl
    state: present
  when: inventory_hostname in groups['masters']

##### SET UP MASTERS ####################

- name: initialize the cluster
  become: yes
  shell: kubeadm init --pod-network-cidr=10.17.0.0/16 --service-cidr=10.18.0.0/24 --service-dns-domain=imranawan.com
  when: inventory_hostname in groups['masters']

- name: create .kube directory
  become: yes
  file:
    path: /root/.kube
    state: directory
    mode: 0755
  when: inventory_hostname in groups['masters']

- name: copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    remote_src: yes
    owner: root
  when: inventory_hostname in groups['masters']

- name: copy pod network manifest
  copy:
    src: canal.yaml
    dest: /root

- name: install pod network
  shell: kubectl apply -f /root/canal.yaml
  when: inventory_hostname in groups['masters']

#########SET UP WORKERS #################

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  when: inventory_hostname in groups['masters']

- name: Copy join command to local file
  become: false
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  when: inventory_hostname in groups['masters']


- name: Copy the join command to server location
  copy: src=join-command dest=/tmp/join-command.sh mode=0777
  when: inventory_hostname in groups['workers']

- name: Join the node to cluster
  command: sh /tmp/join-command.sh
  when: inventory_hostname in groups['workers']